{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%load_ext autoreload\n",
    "%autoreload 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import statsmodels.api as sm\n",
    "# import tushare as ts\n",
    "# import wrds\n",
    "import talib as ta\n",
    "import datetime, time\n",
    "\n",
    "from scipy import stats\n",
    "from dateutil.relativedelta import *\n",
    "from pandas.tseries.offsets import *"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.rcParams['figure.figsize'] = [12, 8]\n",
    "plt.rcParams['image.interpolation'] = 'nearest'\n",
    "plt.rcParams['image.cmap'] = 'gray'\n",
    "plt.style.use('ggplot')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "E:\\ProgramData\\Anaconda3\\envs\\quant\\lib\\site-packages\\IPython\\core\\interactiveshell.py:2785: DtypeWarning: Columns (5) have mixed types. Specify dtype option on import or set low_memory=False.\n",
      "  interactivity=interactivity, compiler=compiler, result=result)\n"
     ]
    }
   ],
   "source": [
    "crsp = pd.read_csv('data/return.zip', \n",
    "                   parse_dates=['date'], infer_datetime_format=True)\n",
    "crsp[['PERMNO', 'PERMCO']] = crsp[['PERMNO', 'PERMCO']].astype(int)\n",
    "crsp_name = pd.read_csv('data/crsp_name.csv', \n",
    "                   parse_dates=['namedt','nameendt'], infer_datetime_format=True)\n",
    "crsp_name = crsp_name.drop('Unnamed: 0', axis=1)\n",
    "crsp_name[['permno', 'shrcd', 'exchcd']] = \\\n",
    "crsp_name[['permno', 'shrcd', 'exchcd']].astype(int)\n",
    "\n",
    "crsp_name['namedt'] = pd.to_datetime(crsp_name['namedt'])\n",
    "crsp_name['nameendt'] = pd.to_datetime(crsp_name['nameendt'])\n",
    "# if nameendt is missing then set to today date\n",
    "crsp_name['nameendt'] = crsp_name['nameendt'].fillna(pd.to_datetime('today'))\n",
    "crsp_merge = pd.merge(crsp, crsp_name, 'inner', left_on='PERMNO', right_on='permno')\n",
    "crsp_merge = crsp_merge[(crsp_merge.date <= crsp_merge.nameendt) &\n",
    "                       (crsp_merge.date >= crsp_merge.namedt)]\n",
    "crsp_merge.RET = crsp_merge.RET.replace(['B', 'C'], [np.nan, np.nan]).astype(np.float64)\n",
    "crsp_merge.RETX = crsp_merge.RETX.replace(['B', 'C'], [np.nan, np.nan]).astype(np.float64)\n",
    "\n",
    "crsp_merge.RET = crsp_merge.RET.fillna(0)\n",
    "crsp_merge.RETX = crsp_merge.RETX.fillna(0)\n",
    "\n",
    "crsp_merge = crsp_merge.drop(['permno', 'namedt', 'nameendt'], axis=1)\n",
    "\n",
    "crsp_merge.columns = [i.lower() for i in crsp_merge.columns]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "crsp_merge = crsp_merge[['permno', 'date', 'ticker', 'comnam',  \n",
    "                         'prc', 'ret', 'shrout', 'retx']]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### calculate the mv, ret+1, retx+1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "# calculate the mv, ret+1, retx+1\n",
    "crsp1 = crsp_merge.assign(mv = crsp_merge.prc.abs() * crsp_merge.shrout,\n",
    "                         ret_p1 = crsp_merge.ret+1,\n",
    "                         retx_p1 = crsp_merge.retx+1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "# resample : use calendar year\n",
    "def normal_resample(df):\n",
    "    res = df.resample('Y').apply({'ret_p1':'cumprod', 'retx_p1':'cumprod'})\n",
    "    res = pd.concat([res, df.mv], axis=1)\n",
    "    res = res.resample('Y').last()\n",
    "    return res"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>ret_p1</th>\n",
       "      <th>retx_p1</th>\n",
       "      <th>mv</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>permno</th>\n",
       "      <th>date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>10234</th>\n",
       "      <th>1974-12-31</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17778</th>\n",
       "      <th>1981-12-31</th>\n",
       "      <td>1.119318</td>\n",
       "      <td>1.119318</td>\n",
       "      <td>485605.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19271</th>\n",
       "      <th>2000-12-31</th>\n",
       "      <td>1.072917</td>\n",
       "      <td>1.072917</td>\n",
       "      <td>137801.125</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     ret_p1   retx_p1          mv\n",
       "permno date                                      \n",
       "10234  1974-12-31  1.000000  1.000000         NaN\n",
       "17778  1981-12-31  1.119318  1.119318  485605.000\n",
       "19271  2000-12-31  1.072917  1.072917  137801.125"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# test_code_list = crsp1.permno.unique().tolist()[-5:]\n",
    "# test_data = crsp1.set_index('permno').iloc[test_code_list]\n",
    "# test_data = test_data.reset_index().set_index('date')\n",
    "# test_data.groupby('permno').apply(normal_resample)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "210.2191183\n"
     ]
    }
   ],
   "source": [
    "tic = time.perf_counter()\n",
    "crsp2 = crsp1.set_index('date').groupby('permno').apply(normal_resample)\n",
    "toc = time.perf_counter()\n",
    "print(toc-tic)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>ret_p1</th>\n",
       "      <th>retx_p1</th>\n",
       "      <th>mv</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>permno</th>\n",
       "      <th>date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">10000</th>\n",
       "      <th>1986-12-31</th>\n",
       "      <td>0.117857</td>\n",
       "      <td>0.117857</td>\n",
       "      <td>1981.56609</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1987-12-31</th>\n",
       "      <td>0.424243</td>\n",
       "      <td>0.424243</td>\n",
       "      <td>851.59375</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"3\" valign=\"top\">10001</th>\n",
       "      <th>1986-12-31</th>\n",
       "      <td>1.217369</td>\n",
       "      <td>1.142857</td>\n",
       "      <td>6937.00000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1987-12-31</th>\n",
       "      <td>0.898725</td>\n",
       "      <td>0.839285</td>\n",
       "      <td>5828.00000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1988-12-31</th>\n",
       "      <td>1.163160</td>\n",
       "      <td>1.085106</td>\n",
       "      <td>6362.25000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     ret_p1   retx_p1          mv\n",
       "permno date                                      \n",
       "10000  1986-12-31  0.117857  0.117857  1981.56609\n",
       "       1987-12-31  0.424243  0.424243   851.59375\n",
       "10001  1986-12-31  1.217369  1.142857  6937.00000\n",
       "       1987-12-31  0.898725  0.839285  5828.00000\n",
       "       1988-12-31  1.163160  1.085106  6362.25000"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "crsp2.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "example : America Online"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "code = 77418 # America Online的permno\n",
    "sample_data = crsp2.loc[(code, slice(None))]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "# calculate the EXF\n",
    "sample_data = sample_data.assign(\n",
    "    exf = sample_data.mv - sample_data.mv.shift(1) * sample_data.retx_p1\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ret_p1</th>\n",
       "      <th>retx_p1</th>\n",
       "      <th>mv</th>\n",
       "      <th>exf</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1992-12-31</th>\n",
       "      <td>1.918033</td>\n",
       "      <td>1.918033</td>\n",
       "      <td>1.678072e+05</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1993-12-31</th>\n",
       "      <td>2.000764</td>\n",
       "      <td>2.000001</td>\n",
       "      <td>4.111965e+05</td>\n",
       "      <td>7.558184e+04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1994-12-31</th>\n",
       "      <td>1.914528</td>\n",
       "      <td>1.914528</td>\n",
       "      <td>9.291520e+05</td>\n",
       "      <td>1.419047e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1995-12-31</th>\n",
       "      <td>2.678568</td>\n",
       "      <td>2.678568</td>\n",
       "      <td>3.246112e+06</td>\n",
       "      <td>7.573156e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1996-12-31</th>\n",
       "      <td>0.886665</td>\n",
       "      <td>0.886665</td>\n",
       "      <td>3.104486e+06</td>\n",
       "      <td>2.262706e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1997-12-31</th>\n",
       "      <td>2.721810</td>\n",
       "      <td>2.721810</td>\n",
       "      <td>9.313355e+06</td>\n",
       "      <td>8.635347e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1998-12-31</th>\n",
       "      <td>6.934765</td>\n",
       "      <td>6.934712</td>\n",
       "      <td>7.106990e+07</td>\n",
       "      <td>6.484468e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1999-12-31</th>\n",
       "      <td>1.956485</td>\n",
       "      <td>1.956485</td>\n",
       "      <td>1.696175e+08</td>\n",
       "      <td>3.057033e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000-12-31</th>\n",
       "      <td>0.458649</td>\n",
       "      <td>0.458649</td>\n",
       "      <td>8.087910e+07</td>\n",
       "      <td>3.084190e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2001-12-31</th>\n",
       "      <td>0.922413</td>\n",
       "      <td>0.922413</td>\n",
       "      <td>1.365999e+08</td>\n",
       "      <td>6.199592e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2002-12-31</th>\n",
       "      <td>0.408099</td>\n",
       "      <td>0.408099</td>\n",
       "      <td>5.631639e+07</td>\n",
       "      <td>5.700648e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2003-12-31</th>\n",
       "      <td>1.373283</td>\n",
       "      <td>1.373283</td>\n",
       "      <td>7.826657e+07</td>\n",
       "      <td>9.282606e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2004-12-31</th>\n",
       "      <td>1.081156</td>\n",
       "      <td>1.081156</td>\n",
       "      <td>8.575871e+07</td>\n",
       "      <td>1.140300e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2005-12-31</th>\n",
       "      <td>0.901661</td>\n",
       "      <td>0.896659</td>\n",
       "      <td>7.979437e+07</td>\n",
       "      <td>2.898036e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2006-12-31</th>\n",
       "      <td>1.263697</td>\n",
       "      <td>1.248854</td>\n",
       "      <td>8.652264e+07</td>\n",
       "      <td>-1.312886e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2007-12-31</th>\n",
       "      <td>0.767318</td>\n",
       "      <td>0.758034</td>\n",
       "      <td>5.967698e+07</td>\n",
       "      <td>-5.910087e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2008-12-31</th>\n",
       "      <td>0.620778</td>\n",
       "      <td>0.609328</td>\n",
       "      <td>3.608984e+07</td>\n",
       "      <td>-2.730212e+05</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              ret_p1   retx_p1            mv           exf\n",
       "date                                                      \n",
       "1992-12-31  1.918033  1.918033  1.678072e+05           NaN\n",
       "1993-12-31  2.000764  2.000001  4.111965e+05  7.558184e+04\n",
       "1994-12-31  1.914528  1.914528  9.291520e+05  1.419047e+05\n",
       "1995-12-31  2.678568  2.678568  3.246112e+06  7.573156e+05\n",
       "1996-12-31  0.886665  0.886665  3.104486e+06  2.262706e+05\n",
       "1997-12-31  2.721810  2.721810  9.313355e+06  8.635347e+05\n",
       "1998-12-31  6.934765  6.934712  7.106990e+07  6.484468e+06\n",
       "1999-12-31  1.956485  1.956485  1.696175e+08  3.057033e+07\n",
       "2000-12-31  0.458649  0.458649  8.087910e+07  3.084190e+06\n",
       "2001-12-31  0.922413  0.922413  1.365999e+08  6.199592e+07\n",
       "2002-12-31  0.408099  0.408099  5.631639e+07  5.700648e+05\n",
       "2003-12-31  1.373283  1.373283  7.826657e+07  9.282606e+05\n",
       "2004-12-31  1.081156  1.081156  8.575871e+07  1.140300e+06\n",
       "2005-12-31  0.901661  0.896659  7.979437e+07  2.898036e+06\n",
       "2006-12-31  1.263697  1.248854  8.652264e+07 -1.312886e+07\n",
       "2007-12-31  0.767318  0.758034  5.967698e+07 -5.910087e+06\n",
       "2008-12-31  0.620778  0.609328  3.608984e+07 -2.730212e+05"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sample_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "80879097.6 136599880.8 -0.0775866884424 61995924.547\n"
     ]
    }
   ],
   "source": [
    "mv_2000 = sample_data['2000'].mv.iloc[0]\n",
    "mv_2001 = sample_data['2001'].mv.iloc[0]\n",
    "rx_2001 = sample_data['2001'].retx_p1.iloc[0] - 1\n",
    "exf_2001 = sample_data['2001'].exf.iloc[0]\n",
    "print(mv_2000, mv_2001, rx_2001, exf_2001)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "通过上表,我们可以观察到$MV_{2000}$为80879, $MV_{2001}$为136600(四舍五入),\n",
    "\n",
    "$rx_{2001}$为-7.76%, $EXF_{2001}$为61996."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python (quant)",
   "language": "python",
   "name": "quant"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.6"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
